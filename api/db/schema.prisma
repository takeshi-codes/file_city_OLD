// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

enum EventType {
  locals
  storeRegional
  onlineRegional
  offlineRegional
  storeUltimateCup
  onlineUltimateCup
  offlineUltimateCup
  nationals
  worlds
}

enum PlacementType {
  first
  second
  top4
  top8
  top16
  top32
  top64
  top128
  top256
  top512
}

enum ResultsType {
  WW
  LL
  WLW
  WLL
  LWW
  LWL
  TIE
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  events              Event[]
  rounds              Round[]
}

model Event {
  id        String        @id @default(cuid()) // Unique identifier for each event
  eventDate DateTime
  eventDeck String
  eventName String
  eventType EventType
  placement PlacementType
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rounds    Round[] // An event can have many rounds
}

model Round {
  id           String      @id @default(cuid()) // Unique identifier for each round
  roundNumber  Int
  opponentDeck String
  result       ResultsType
  eventId      String
  userId       String
  event        Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
